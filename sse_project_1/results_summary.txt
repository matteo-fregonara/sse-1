Starting training benchmark - 30 iterations
========================================

Running iteration 1 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 62.917236328125 for 3.8185668 sec of execution.
Results saved to results\pytorch_iter1_20250220_211154.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:13:02.263978: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:13:03.595370: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:13:07.161667: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 787us/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 168.9796142578125 for 9.835375 sec of execution.
Results saved to results\tensorflow_iter1_20250220_211154.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 29.693603515625 for 1.8186312 sec of execution.
Results saved to results\jax_iter1_20250220_211154.csv
Waiting 60 seconds...

Running iteration 2 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 42.146484375 for 2.6264424 sec of execution.
Results saved to results\pytorch_iter2_20250220_211511.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:16:16.924423: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:16:17.589858: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:16:19.223664: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 967us/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 117.04266357421875 for 6.834714 sec of execution.
Results saved to results\tensorflow_iter2_20250220_211511.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 21.88934326171875 for 1.4236751 sec of execution.
Results saved to results\jax_iter2_20250220_211511.csv
Waiting 60 seconds...

Running iteration 3 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 43.823486328125 for 2.6169262 sec of execution.
Results saved to results\pytorch_iter3_20250220_211823.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:19:28.981981: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:19:29.658866: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:19:31.330855: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 118.296142578125 for 6.830988 sec of execution.
Results saved to results\tensorflow_iter3_20250220_211823.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 23.29876708984375 for 1.423368 sec of execution.
Results saved to results\jax_iter3_20250220_211823.csv
Waiting 60 seconds...

Running iteration 4 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 46.71337890625 for 2.6267498 sec of execution.
Results saved to results\pytorch_iter4_20250220_212135.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:22:40.987892: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:22:41.652567: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:22:43.297893: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 115.4354248046875 for 6.833503 sec of execution.
Results saved to results\tensorflow_iter4_20250220_212135.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 22.7454833984375 for 1.4201914 sec of execution.
Results saved to results\jax_iter4_20250220_212135.csv
Waiting 60 seconds...

Running iteration 5 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 40.84075927734375 for 2.625979 sec of execution.
Results saved to results\pytorch_iter5_20250220_212447.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:25:52.984340: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:25:53.653654: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:25:55.311751: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 115.65966796875 for 6.832157 sec of execution.
Results saved to results\tensorflow_iter5_20250220_212447.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 20.9794921875 for 1.4207183 sec of execution.
Results saved to results\jax_iter5_20250220_212447.csv
Waiting 60 seconds...

Running iteration 6 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 41.06829833984375 for 2.6128871 sec of execution.
Results saved to results\pytorch_iter6_20250220_212759.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:29:04.937727: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:29:05.600568: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:29:07.284972: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 122.251953125 for 6.8291917 sec of execution.
Results saved to results\tensorflow_iter6_20250220_212759.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 24.847900390625 for 1.4199802 sec of execution.
Results saved to results\jax_iter6_20250220_212759.csv
Waiting 60 seconds...

Running iteration 7 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 39.18804931640625 for 2.6132164 sec of execution.
Results saved to results\pytorch_iter7_20250220_213111.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:32:17.015770: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:32:17.674819: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:32:19.330487: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 115.1041259765625 for 6.832882 sec of execution.
Results saved to results\tensorflow_iter7_20250220_213111.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 22.55255126953125 for 1.4187603 sec of execution.
Results saved to results\jax_iter7_20250220_213111.csv
Waiting 60 seconds...

Running iteration 8 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 40.802490234375 for 2.6200192 sec of execution.
Results saved to results\pytorch_iter8_20250220_213423.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:35:28.986364: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:35:29.662171: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:35:31.326661: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 1ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 830us/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 115.90020751953125 for 6.832241 sec of execution.
Results saved to results\tensorflow_iter8_20250220_213423.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 24.03582763671875 for 1.4093056 sec of execution.
Results saved to results\jax_iter8_20250220_213423.csv
Waiting 60 seconds...

Running iteration 9 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 39.93280029296875 for 2.619304 sec of execution.
Results saved to results\pytorch_iter9_20250220_213735.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:38:40.991474: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:38:41.663258: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:38:43.312904: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 120.485595703125 for 6.8282204 sec of execution.
Results saved to results\tensorflow_iter9_20250220_213735.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 23.85992431640625 for 1.4187071 sec of execution.
Results saved to results\jax_iter9_20250220_213735.csv
Waiting 60 seconds...

Running iteration 10 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 39.473876953125 for 2.626694 sec of execution.
Results saved to results\pytorch_iter10_20250220_214047.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:41:52.912452: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:41:53.578242: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:41:55.207251: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 895us/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 116.654541015625 for 6.829426 sec of execution.
Results saved to results\tensorflow_iter10_20250220_214047.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 21.60467529296875 for 1.4177623 sec of execution.
Results saved to results\jax_iter10_20250220_214047.csv
Waiting 60 seconds...

Running iteration 11 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 41.0421142578125 for 2.616229 sec of execution.
Results saved to results\pytorch_iter11_20250220_214359.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:45:05.007513: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:45:05.683073: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:45:07.332366: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 961us/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 115.5731201171875 for 6.8260546 sec of execution.
Results saved to results\tensorflow_iter11_20250220_214359.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 22.62738037109375 for 1.4228257 sec of execution.
Results saved to results\jax_iter11_20250220_214359.csv
Waiting 60 seconds...

Running iteration 12 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 40.757568359375 for 2.6260939 sec of execution.
Results saved to results\pytorch_iter12_20250220_214711.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:48:16.900879: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:48:17.557472: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:48:19.201285: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 1ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 115.03436279296875 for 6.8282795 sec of execution.
Results saved to results\tensorflow_iter12_20250220_214711.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 22.28057861328125 for 1.4179406 sec of execution.
Results saved to results\jax_iter12_20250220_214711.csv
Waiting 60 seconds...

Running iteration 13 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 41.5166015625 for 2.6205385 sec of execution.
Results saved to results\pytorch_iter13_20250220_215023.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:51:28.943810: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:51:29.597332: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:51:31.242714: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1000us/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 119.55419921875 for 6.8266335 sec of execution.
Results saved to results\tensorflow_iter13_20250220_215023.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 22.36724853515625 for 1.422633 sec of execution.
Results saved to results\jax_iter13_20250220_215023.csv
Waiting 60 seconds...

Running iteration 14 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 39.57977294921875 for 2.6197686 sec of execution.
Results saved to results\pytorch_iter14_20250220_215335.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:54:40.958088: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:54:41.626272: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:54:43.273343: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 116.4669189453125 for 6.8292594 sec of execution.
Results saved to results\tensorflow_iter14_20250220_215335.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 23.74658203125 for 1.4210087 sec of execution.
Results saved to results\jax_iter14_20250220_215335.csv
Waiting 60 seconds...

Running iteration 15 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 39.1634521484375 for 2.6217868 sec of execution.
Results saved to results\pytorch_iter15_20250220_215647.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 21:57:52.904307: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 21:57:53.561862: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 21:57:55.194497: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 973us/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 998us/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 119.81707763671875 for 6.8295226 sec of execution.
Results saved to results\tensorflow_iter15_20250220_215647.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 25.47381591796875 for 1.4200802 sec of execution.
Results saved to results\jax_iter15_20250220_215647.csv
Waiting 60 seconds...

Running iteration 16 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 38.77166748046875 for 2.62725 sec of execution.
Results saved to results\pytorch_iter16_20250220_215959.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:01:05.002266: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:01:05.674105: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:01:07.308777: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 115.3114013671875 for 6.8283377 sec of execution.
Results saved to results\tensorflow_iter16_20250220_215959.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 22.67138671875 for 1.4203997 sec of execution.
Results saved to results\jax_iter16_20250220_215959.csv
Waiting 60 seconds...

Running iteration 17 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 40.38360595703125 for 2.625657 sec of execution.
Results saved to results\pytorch_iter17_20250220_220311.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:04:16.941868: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:04:17.587279: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:04:19.235555: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 117.69854736328125 for 6.8296494 sec of execution.
Results saved to results\tensorflow_iter17_20250220_220311.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 21.720947265625 for 1.4196935 sec of execution.
Results saved to results\jax_iter17_20250220_220311.csv
Waiting 60 seconds...

Running iteration 18 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 41.2772216796875 for 2.6269145 sec of execution.
Results saved to results\pytorch_iter18_20250220_220623.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:07:28.933148: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:07:29.597616: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:07:31.238831: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 114.341796875 for 6.8305902 sec of execution.
Results saved to results\tensorflow_iter18_20250220_220623.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 21.87164306640625 for 1.4192249 sec of execution.
Results saved to results\jax_iter18_20250220_220623.csv
Waiting 60 seconds...

Running iteration 19 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 40.89697265625 for 2.6178453 sec of execution.
Results saved to results\pytorch_iter19_20250220_220935.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:10:40.912160: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:10:41.568707: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:10:43.200010: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 1ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 114.12481689453125 for 6.8297176 sec of execution.
Results saved to results\tensorflow_iter19_20250220_220935.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 26.00177001953125 for 1.4131656 sec of execution.
Results saved to results\jax_iter19_20250220_220935.csv
Waiting 60 seconds...

Running iteration 20 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 41.66485595703125 for 2.6212394 sec of execution.
Results saved to results\pytorch_iter20_20250220_221247.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:13:52.924420: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:13:53.593115: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:13:55.270586: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 1ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 117.21136474609375 for 6.8337 sec of execution.
Results saved to results\tensorflow_iter20_20250220_221247.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 23.019775390625 for 1.4196591 sec of execution.
Results saved to results\jax_iter20_20250220_221247.csv
Waiting 60 seconds...

Running iteration 21 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 42.00335693359375 for 2.6268482 sec of execution.
Results saved to results\pytorch_iter21_20250220_221559.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:17:04.904268: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:17:05.577005: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:17:07.251206: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 887us/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 112.5264892578125 for 6.8296056 sec of execution.
Results saved to results\tensorflow_iter21_20250220_221559.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 21.9735107421875 for 1.423495 sec of execution.
Results saved to results\jax_iter21_20250220_221559.csv
Waiting 60 seconds...

Running iteration 22 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 40.80450439453125 for 2.6179404 sec of execution.
Results saved to results\pytorch_iter22_20250220_221911.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:20:17.014712: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:20:17.677493: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:20:19.334624: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 835us/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 996us/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 116.3720703125 for 6.824333 sec of execution.
Results saved to results\tensorflow_iter22_20250220_221911.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 22.520751953125 for 1.4181497 sec of execution.
Results saved to results\jax_iter22_20250220_221911.csv
Waiting 60 seconds...

Running iteration 23 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 39.07666015625 for 2.618709 sec of execution.
Results saved to results\pytorch_iter23_20250220_222223.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:23:28.998152: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:23:29.668470: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:23:31.322608: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 112.6182861328125 for 6.8313203 sec of execution.
Results saved to results\tensorflow_iter23_20250220_222223.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 23.21099853515625 for 1.4145497 sec of execution.
Results saved to results\jax_iter23_20250220_222223.csv
Waiting 60 seconds...

Running iteration 24 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 41.46539306640625 for 2.621801 sec of execution.
Results saved to results\pytorch_iter24_20250220_222535.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:26:40.935576: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:26:41.592604: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:26:43.218354: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 881us/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 969us/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 115.38751220703125 for 6.82562 sec of execution.
Results saved to results\tensorflow_iter24_20250220_222535.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 23.0909423828125 for 1.4204396 sec of execution.
Results saved to results\jax_iter24_20250220_222535.csv
Waiting 60 seconds...

Running iteration 25 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 40.625732421875 for 2.6222222 sec of execution.
Results saved to results\pytorch_iter25_20250220_222847.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:29:52.918177: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:29:53.586065: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:29:55.219086: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 690us/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 116.9111328125 for 6.82785 sec of execution.
Results saved to results\tensorflow_iter25_20250220_222847.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 22.29541015625 for 1.4234643 sec of execution.
Results saved to results\jax_iter25_20250220_222847.csv
Waiting 60 seconds...

Running iteration 26 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 39.3177490234375 for 2.619728 sec of execution.
Results saved to results\pytorch_iter26_20250220_223159.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:33:05.032906: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:33:05.702275: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:33:07.344959: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 891us/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 888us/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 115.35601806640625 for 6.8315735 sec of execution.
Results saved to results\tensorflow_iter26_20250220_223159.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 23.42669677734375 for 1.4216928 sec of execution.
Results saved to results\jax_iter26_20250220_223159.csv
Waiting 60 seconds...

Running iteration 27 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 39.01702880859375 for 2.6187723 sec of execution.
Results saved to results\pytorch_iter27_20250220_223511.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:36:17.018243: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:36:17.673866: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:36:19.354328: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 835us/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 123.215087890625 for 6.830817 sec of execution.
Results saved to results\tensorflow_iter27_20250220_223511.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 23.39483642578125 for 1.4190686 sec of execution.
Results saved to results\jax_iter27_20250220_223511.csv
Waiting 60 seconds...

Running iteration 28 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 39.3236083984375 for 2.6210327 sec of execution.
Results saved to results\pytorch_iter28_20250220_223823.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:39:29.015881: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:39:29.683570: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:39:31.321263: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 1ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 956us/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 972us/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 114.56170654296875 for 6.832852 sec of execution.
Results saved to results\tensorflow_iter28_20250220_223823.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 21.825927734375 for 1.4200772 sec of execution.
Results saved to results\jax_iter28_20250220_223823.csv
Waiting 60 seconds...

Running iteration 29 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 39.27008056640625 for 2.628274 sec of execution.
Results saved to results\pytorch_iter29_20250220_224135.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:42:40.880400: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:42:41.556829: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:42:43.210075: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 114.52215576171875 for 6.827969 sec of execution.
Results saved to results\tensorflow_iter29_20250220_224135.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 22.00506591796875 for 1.4227109 sec of execution.
Results saved to results\jax_iter29_20250220_224135.csv
Waiting 60 seconds...

Running iteration 30 of 30
----------------------------------------
Running PyTorch training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
Energy consumption in joules: 41.13623046875 for 2.6239815 sec of execution.
Results saved to results\pytorch_iter30_20250220_224447.csv
Waiting 60 seconds...
Running TensorFlow training...
Training PyTorch model on CPU...
Epoch 1/10 - loss: 0.6092 - accuracy: 0.7190
Epoch 2/10 - loss: 0.4272 - accuracy: 0.9090
Epoch 3/10 - loss: 0.2667 - accuracy: 0.9510
Epoch 4/10 - loss: 0.1783 - accuracy: 0.9650
Epoch 5/10 - loss: 0.1335 - accuracy: 0.9780
Epoch 6/10 - loss: 0.1034 - accuracy: 0.9840
Epoch 7/10 - loss: 0.0845 - accuracy: 0.9900
Epoch 8/10 - loss: 0.0698 - accuracy: 0.9930
Epoch 9/10 - loss: 0.0602 - accuracy: 0.9940
Epoch 10/10 - loss: 0.0543 - accuracy: 0.9930
2025-02-20 22:45:52.989039: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-02-20 22:45:53.653299: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
Training TensorFlow model on CPU...
C:\Users\matte\PycharmProjects\sse_project_1\.venv\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2025-02-20 22:45:55.325686: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
TensorFlow is using: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]
Epoch 1/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step - accuracy: 0.5923 - loss: 0.6643
Epoch 2/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.8792 - loss: 0.4826
Epoch 3/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9287 - loss: 0.3188
Epoch 4/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 2ms/step - accuracy: 0.9448 - loss: 0.2098
Epoch 5/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9642 - loss: 0.1507
Epoch 6/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9833 - loss: 0.1170
Epoch 7/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0953
Epoch 8/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9929 - loss: 0.0796
Epoch 9/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9934 - loss: 0.0677
Epoch 10/10
32/32 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step - accuracy: 0.9950 - loss: 0.0584
Energy consumption in joules: 110.3262939453125 for 6.8228073 sec of execution.
Results saved to results\tensorflow_iter30_20250220_224447.csv
Waiting 60 seconds...
Running Jax training...
JAX is using: [CpuDevice(id=0)]
Training JAX/Flax model on CPU...
Traceback (most recent call last):
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 125, in <module>
    jax_model = train_jax()
  File "C:\Users\matte\PycharmProjects\sse_project_1\train_jax.py", line 95, in train_jax
    y_jax = jnp.array(y_jax)
UnboundLocalError: local variable 'y_jax' referenced before assignment
Energy consumption in joules: 22.8917236328125 for 1.4190313 sec of execution.
Results saved to results\jax_iter30_20250220_224447.csv
Waiting 60 seconds...

========================================
Benchmark completed - all 30 iterations finished
Results saved to the 'results' directory
(.venv) PS C:\Users\matte\PycharmProjects\sse_project_1>

